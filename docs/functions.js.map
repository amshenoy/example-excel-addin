{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://stream-addin-js/webpack/bootstrap","webpack://stream-addin-js/./src/functions/functions.js","webpack://stream-addin-js/webpack/runtime/define property getters","webpack://stream-addin-js/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","window.subscribers = {}\n\nwindow.histories = {}\nwindow.historyLengths = {}\nwindow.historyInvocations = {}\n\n/* global clearInterval, console, setInterval */\n\n/**\n * Increment the cells with a given amount every second. Creates a dynamic spilled array with multiple results\n * @customfunction\n * @param {string} address The address of the source cell as we are unable to use @ requiresAddress with @ streaming\n * @param {string} channel The channel to subscribe to.\n * @param {CustomFunctions.StreamingInvocation<number[][]>} invocation Parameter to send results to Excel or respond to the user canceling the function. A dynamic array.\n */\nexport function subscribe(channel, datakey, invocation) {\n    if (channel.trim() == '') { return }\n\n    // Better data structures: Dict<Channel, Dict<DataKey, List<InvocAddress>>> and Dict<InvocAddress, Invocation>\n    // Or even better: Dict<Channel, List<Tuple<DataKey, InvocAddress>>> and Dict<InvocAddress, Invocation>\n    // Or best: Dict<Channel, Dict<DataKey, Set<Invocation>>>\n\n    if (!(channel in window.subscribers)) {\n        window.subscribers[channel] = {}\n    }\n    if (!(datakey in window.subscribers[channel])) {\n        window.subscribers[channel][datakey] = new Set()\n    }\n    window.subscribers[channel][datakey].add(invocation)\n\n    invocation.onCanceled = () => {\n        window.subscribers[channel][datakey].delete(invocation)\n    }\n}\n\n\n\n/**\n  * Fetch JSON from URL\n  * @customfunction \n  * @param {string} url string name of Github user or organization.\n  * @return {string} JSON response string\n  */\nexport async function fetchJson(url) {\n    try {\n        const response = await fetch(url);\n        console.log(response)\n        if (!response.ok) {\n            console.log(response.status)\n            // throw new Error(response.statusText)\n        }\n        const jsonResponse = await response.json();\n        const jsonString = JSON.stringify(jsonResponse);\n        console.log(jsonString);\n        return jsonString;\n    }\n    catch (error) {\n        return error;\n    }\n}\n\n\n/**\n  * Parse JSON from JSON string\n  * @customfunction \n  * @param {string} json JSON string to parse\n  * @param {string} key\n  * @return {string} JSON response string\n  */\nexport function extract(json, key) {\n    const keys = key.split('.');\n    let value = JSON.parse(json);\n    console.log(value)\n\n    for (const key of keys) {\n        if (value.hasOwnProperty(key)) {\n            value = value[key];\n            console.log(value)\n        } else {\n            return undefined;\n        }\n    }\n\n    return JSON.stringify(value);\n}\n\n\n// Optional parameters must use Typescript format and not be assigned in the parameter\n// https://learn.microsoft.com/en-us/office/dev/add-ins/excel/custom-functions-parameter-options?tabs=javascript\n\n/**\n  * Convert JSON string to Excel range\n  * @customfunction \n  * @param {string} json JSON string to parse\n  * @param {boolean} [includeKeys] Include object keys as headers\n  * @return {string[][]} Dynamic range array with multiple results\n  */\nexport function parseJsonRange(json, includeKeys) {\n    if (includeKeys == null) {\n        includeKeys = false\n    }\n\n    const obj = JSON.parse(json)\n    var list = obj;\n    if (!Array.isArray(obj) || obj.length === 0) {\n        // Handle cases where the input is not a list of objects\n        list = [obj];\n    }\n\n    const result = [];\n\n    const keys = Object.keys(list[0]);\n    if (includeKeys) {\n        result.push(keys);\n    }\n\n    for (const obj of list) {\n        const values = keys.map(key => obj[key]);\n        result.push(values);\n    }\n    return result;\n}\n\n\n\n\n\n\n/**\n  * Gets the star count for a given Github repository.\n  * @customfunction \n  * @param {string} userName string name of Github user or organization.\n  * @param {string} repoName string name of the Github repository.\n  * @return {number} number of stars given to a Github repository.\n  */\nexport async function getStarCount(userName, repoName) {\n    try {\n        //You can change this URL to any web request you want to work with.\n        const url = \"https://api.github.com/repos/\" + userName + \"/\" + repoName;\n        const response = await fetch(url);\n        //Expect that status code is in 200-299 range\n        if (!response.ok) {\n            throw new Error(response.statusText)\n        }\n        const jsonResponse = await response.json();\n        return jsonResponse.watchers_count;\n    }\n    catch (error) {\n        return error;\n    }\n}\n\n\n/**\n * Displays the current time once a second\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nexport function clock(invocation) {\n    const timer = setInterval(() => {\n        const time = currentTime();\n        invocation.setResult(time);\n    }, 1000);\n\n    invocation.onCanceled = () => {\n        clearInterval(timer);\n    };\n}\n\n/**\n * Returns the current time\n * @returns {string} String with the current time formatted for the current locale.\n */\nexport function currentTime() {\n    return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param {number} incrementBy Amount to increment\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nexport function increment(incrementBy, invocation) {\n    let result = 0;\n    const timer = setInterval(() => {\n        result += incrementBy;\n        invocation.setResult(result);\n    }, 1000);\n\n    invocation.onCanceled = () => {\n        clearInterval(timer);\n    };\n}\n\n/**\n * Increment the cells with a given amount every second. Creates a dynamic spilled array with multiple results\n * @customfunction\n * @param {number} amount The amount to add to the cell value on each increment.\n * @param {CustomFunctions.StreamingInvocation<number[][]>} invocation Parameter to send results to Excel or respond to the user canceling the function. A dynamic array.\n */\nexport function incrementArray(amount, invocation) {\n    let firstResult = 0;\n    let secondResult = 1;\n    let thirdResult = 2;\n\n    const timer = setInterval(() => {\n        firstResult += amount;\n        secondResult += amount;\n        thirdResult += amount;\n        invocation.setResult([[firstResult], [secondResult], [thirdResult]]);\n    }, 1000);\n\n    invocation.onCanceled = () => {\n        clearInterval(timer);\n    };\n}\n\n\n\nasync function onBindingDataChanged(eventArgs) {\n    const bindingId = eventArgs.binding.id\n    const address = bindingId\n    await Excel.run(async (context) => {\n        const binding = context.workbook.bindings.getItem(bindingId)\n        const range = binding.getRange()\n\n        range.load([\"address\", \"values\"])\n        await context.sync()\n        // console.log(bindingId, range.address)\n\n        const newValue = range.values[0][0]\n        if (newValue) {\n            window.histories[address].push(newValue)\n        }\n    })\n    if (window.histories[address].length > window.historyLengths[address]) {\n        window.histories[address].shift() // Keep only the last n values\n    }\n    for (let invocator of window.historyInvocations[address]) {\n        invocator.setResult([window.histories[address]])\n    }\n}\n\n/**\n * Increment the cells with a given amount every second. Creates a dynamic spilled array with multiple results\n * @customfunction\n * @param {string} address The address of the source cell as we are unable to use @ requiresAddress with @ streaming\n * @param {number} n The channel to subscribe to.\n * @param {CustomFunctions.StreamingInvocation<number[][]>} invocation Parameter to send results to Excel or respond to the user canceling the function. A dynamic array.\n */\nexport async function History(address, n, invocation) {\n    var newAddress = false\n    if (!(address in window.histories)) {\n        window.histories[address] = []\n        window.historyLengths[address] = n\n        window.historyInvocations[address] = new Set()\n        newAddress = true\n    }\n\n    await Excel.run(async (context) => {\n        const sheet = context.workbook.worksheets.getActiveWorksheet()\n        const range = sheet.getRange(address)\n\n        // If new source address for stream, add a binding to listen for changes \n        if (newAddress) {\n            // Note: We have to use Excel.binding not Office.binding\n            // https://learn.microsoft.com/en-us/javascript/api/excel/excel.binding?view=excel-js-preview\n            // const bindingId = range.address // This looks like Sheet1!B3 instead of B3\n            const bindingId = address\n            const binding = context.workbook.bindings.add(range, Excel.BindingType.Range, bindingId)\n            binding.onDataChanged.add(onBindingDataChanged)\n        }\n\n        window.historyInvocations[address].add(invocation)\n        invocation.onCanceled = () => {\n            window.historyInvocations[address].delete(invocation)\n        }\n\n        await context.sync()\n    }).catch(error => {\n        console.error(error)\n    })\n}\n\nCustomFunctions.associate(\"SUBSCRIBE\", subscribe);\nCustomFunctions.associate(\"FETCHJSON\", fetchJson);\nCustomFunctions.associate(\"EXTRACT\", extract);\nCustomFunctions.associate(\"PARSEJSONRANGE\", parseJsonRange);\nCustomFunctions.associate(\"GETSTARCOUNT\", getStarCount);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"INCREMENTARRAY\", incrementArray);\nCustomFunctions.associate(\"HISTORY\", History);","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }"],"names":["__webpack_require__","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","done","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","minLen","_arrayLikeToArray","n","toString","from","test","_unsupportedIterableToArray","F","s","e","_e","f","normalCompletion","didErr","step","_e2","arr","len","arr2","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_fetchJson","_callee","url","response","jsonResponse","jsonString","_context","fetch","console","log","ok","status","json","JSON","stringify","t0","_getStarCount","_callee2","userName","repoName","_context2","statusText","watchers_count","onBindingDataChanged","_x4","_onBindingDataChanged","_callee4","eventArgs","bindingId","address","_iterator3","_step3","_context4","binding","id","Excel","run","_ref","_callee3","range","newValue","_context3","workbook","bindings","getItem","getRange","load","sync","window","histories","_x8","historyLengths","shift","historyInvocations","setResult","_History","_callee6","invocation","newAddress","_context6","Set","_ref2","_callee5","sheet","_context5","worksheets","getActiveWorksheet","add","BindingType","Range","onDataChanged","onCanceled","delete","_x9","d","definition","get","prop","subscribers","CustomFunctions","associate","channel","datakey","trim","_x","split","parse","_step","_iterator","includeKeys","list","_step2","_iterator2","_loop","map","_x2","_x3","timer","setInterval","time","Date","toLocaleTimeString","clearInterval","incrementBy","amount","firstResult","secondResult","thirdResult","_x5","_x6","_x7"],"sourceRoot":""}