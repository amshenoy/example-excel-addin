{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://stream-addin-js/webpack/bootstrap","webpack://stream-addin-js/./src/functions/functions.js","webpack://stream-addin-js/webpack/runtime/define property getters","webpack://stream-addin-js/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","window.subscribers = {}\n\nwindow.histories = {}\nwindow.historyLengths = {}\nwindow.historyInvocations = {}\n\n/* global clearInterval, console, setInterval */\n\n/**\n * Increment the cells with a given amount every second. Creates a dynamic spilled array with multiple results\n * @customfunction\n * @param {string} address The address of the source cell as we are unable to use @ requiresAddress with @ streaming\n * @param {string} channel The channel to subscribe to.\n * @param {CustomFunctions.StreamingInvocation<number[][]>} invocation Parameter to send results to Excel or respond to the user canceling the function. A dynamic array.\n */\nexport function subscribe(channel, datakey, invocation) {\n    if (channel.trim() == '') { return }\n\n    // Better data structures: Dict<Channel, Dict<DataKey, List<InvocAddress>>> and Dict<InvocAddress, Invocation>\n    // Or even better: Dict<Channel, List<Tuple<DataKey, InvocAddress>>> and Dict<InvocAddress, Invocation>\n    // Or best: Dict<Channel, Dict<DataKey, Set<Invocation>>>\n\n    if (!(channel in window.subscribers)) {\n        window.subscribers[channel] = {}\n    }\n    if (!(datakey in window.subscribers[channel])) {\n        window.subscribers[channel][datakey] = new Set()\n    }\n    window.subscribers[channel][datakey].add(invocation)\n\n    invocation.onCanceled = () => {\n        window.subscribers[channel][datakey].delete(invocation)\n    }\n}\n\n\n\n\n\n/**\n  * Gets the star count for a given Github repository.\n  * @customfunction \n  * @param {string} userName string name of Github user or organization.\n  * @param {string} repoName string name of the Github repository.\n  * @return {number} number of stars given to a Github repository.\n  */\nexport async function getStarCount(userName, repoName) {\n    try {\n        //You can change this URL to any web request you want to work with.\n        const url = \"https://api.github.com/repos/\" + userName + \"/\" + repoName;\n        const response = await fetch(url);\n        //Expect that status code is in 200-299 range\n        if (!response.ok) {\n            throw new Error(response.statusText)\n        }\n        const jsonResponse = await response.json();\n        return jsonResponse.watchers_count;\n    }\n    catch (error) {\n        return error;\n    }\n}\n\n\n/**\n * Displays the current time once a second\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nexport function clock(invocation) {\n    const timer = setInterval(() => {\n        const time = currentTime();\n        invocation.setResult(time);\n    }, 1000);\n\n    invocation.onCanceled = () => {\n        clearInterval(timer);\n    };\n}\n\n/**\n * Returns the current time\n * @returns {string} String with the current time formatted for the current locale.\n */\nexport function currentTime() {\n    return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param {number} incrementBy Amount to increment\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nexport function increment(incrementBy, invocation) {\n    let result = 0;\n    const timer = setInterval(() => {\n        result += incrementBy;\n        invocation.setResult(result);\n    }, 1000);\n\n    invocation.onCanceled = () => {\n        clearInterval(timer);\n    };\n}\n\n/**\n * Increment the cells with a given amount every second. Creates a dynamic spilled array with multiple results\n * @customfunction\n * @param {number} amount The amount to add to the cell value on each increment.\n * @param {CustomFunctions.StreamingInvocation<number[][]>} invocation Parameter to send results to Excel or respond to the user canceling the function. A dynamic array.\n */\nexport function incrementArray(amount, invocation) {\n    let firstResult = 0;\n    let secondResult = 1;\n    let thirdResult = 2;\n\n    const timer = setInterval(() => {\n        firstResult += amount;\n        secondResult += amount;\n        thirdResult += amount;\n        invocation.setResult([[firstResult], [secondResult], [thirdResult]]);\n    }, 1000);\n\n    invocation.onCanceled = () => {\n        clearInterval(timer);\n    };\n}\n\n\n\nasync function onBindingDataChanged(eventArgs) {\n    const bindingId = eventArgs.binding.id\n    const address = bindingId\n    await Excel.run(async (context) => {\n        const binding = context.workbook.bindings.getItem(bindingId)\n        const range = binding.getRange()\n        \n        range.load([\"address\", \"values\"])\n        await context.sync()\n        // console.log(bindingId, range.address)\n\n        const newValue = range.values[0][0]\n        if (newValue)\n        {\n            window.histories[address].push(newValue)\n        }\n    })\n    if (window.histories[address].length > window.historyLengths[address]) {\n        window.histories[address].shift() // Keep only the last n values\n    }\n    for (let invocator of window.historyInvocations[address]) {\n        invocator.setResult([window.histories[address]])\n    }\n}\n\n/**\n * Increment the cells with a given amount every second. Creates a dynamic spilled array with multiple results\n * @customfunction\n * @param {string} address The address of the source cell as we are unable to use @ requiresAddress with @ streaming\n * @param {number} n The channel to subscribe to.\n * @param {CustomFunctions.StreamingInvocation<number[][]>} invocation Parameter to send results to Excel or respond to the user canceling the function. A dynamic array.\n */\nexport async function History(address, n, invocation)\n{\n    var newAddress = false\n    if (!(address in window.histories))\n    {\n        window.histories[address] = []\n        window.historyLengths[address] = n\n        window.historyInvocations[address] = new Set()\n        newAddress = true\n    }\n\n    await Excel.run(async (context) => {\n        const sheet = context.workbook.worksheets.getActiveWorksheet()\n        const range = sheet.getRange(address)\n        \n        // If new source address for stream, add a binding to listen for changes \n        if (newAddress)\n        {\n            // Note: We have to use Excel.binding not Office.binding\n            // https://learn.microsoft.com/en-us/javascript/api/excel/excel.binding?view=excel-js-preview\n            // const bindingId = range.address // This looks like Sheet1!B3 instead of B3\n            const bindingId = address\n            const binding = context.workbook.bindings.add(range, Excel.BindingType.Range, bindingId)\n            binding.onDataChanged.add(onBindingDataChanged)\n        }\n\n        window.historyInvocations[address].add(invocation)\n        invocation.onCanceled = () => {\n            window.historyInvocations[address].delete(invocation)\n        }\n\n        await context.sync()\n    }).catch(error => {\n        console.error(error)\n    })\n}\n\nCustomFunctions.associate(\"SUBSCRIBE\", subscribe);\nCustomFunctions.associate(\"GETSTARCOUNT\", getStarCount);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"INCREMENTARRAY\", incrementArray);\nCustomFunctions.associate(\"HISTORY\", History);","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }"],"names":["__webpack_require__","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","done","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_getStarCount","_callee","userName","repoName","url","response","jsonResponse","_context","fetch","ok","statusText","json","watchers_count","t0","onBindingDataChanged","_x3","_onBindingDataChanged","_callee3","eventArgs","bindingId","address","_iterator","_step","_context3","binding","id","Excel","run","_ref","_callee2","range","newValue","_context2","workbook","bindings","getItem","getRange","load","sync","window","histories","_x7","historyLengths","shift","_createForOfIteratorHelper","historyInvocations","s","n","setResult","e","f","_History","_callee5","invocation","newAddress","_context5","Set","_ref2","_callee4","sheet","_context4","worksheets","getActiveWorksheet","add","BindingType","Range","onDataChanged","onCanceled","delete","_x8","console","d","definition","o","get","prop","subscribers","CustomFunctions","associate","channel","datakey","trim","_x","_x2","timer","setInterval","time","Date","toLocaleTimeString","clearInterval","incrementBy","amount","firstResult","secondResult","thirdResult","_x4","_x5","_x6"],"sourceRoot":""}